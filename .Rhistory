'orange' = 'Flagged WHZ entre 1 et 5%',
'red' = 'Flagged WHZ > 5%',
'grey' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Répartition des Enquêtes par Année",
x = "Année",
y = "ID de l'Enquête",
color = "Flag WHZ") +
ggplot2::theme_minimal() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))
metadata$color
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$flag_whz),
'grey',
cut(metadata$flag_whz,
breaks = c(0, 1, 5, 100),
labels = c('green', 'orange', 'red')))
metadata$color
?cut
metadata$color <- ifelse(is.na(metadata$flag_whz),
yes = 'grey',
no = cut(metadata$flag_whz,
breaks = c(0, 1, 5, 100),
labels = c('green', 'orange', 'red')))
metadata$color
## Select all the files in the folder
all_files <- list.files(path = folder_name, pattern = ".csv")
## Find the cluster one
all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
metadata <- rio::import(paste(folder_name, '/', all_files, sep=''))
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$flag_whz),
yes = 'grey',
no = cut(metadata$flag_whz,
breaks = c(0, 1, 5, 100),
labels = c('green', 'orange', 'red')))
metadata
metadata$color
metadata$flag_whz
ifelse(is.na(metadata$flag_whz),
'grey',
cut(metadata$flag_whz,
breaks = c(-Inf, 1, 5, Inf),
labels = c('green', 'orange', 'red')))
metadata$color <- ifelse(is.na(metadata$flag_whz),
'3',
cut(metadata$flag_whz,
breaks = c(-Inf, 1, 5, Inf),
labels = c('green', 'orange', 'red')))
metadata$color
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('green' = 'green', 'orange' = 'orange', 'red' = 'red', 'grey' = 'grey'),
labels = c('green' = 'Flagged WHZ < 1%',
'orange' = 'Flagged WHZ entre 1 et 5%',
'red' = 'Flagged WHZ > 5%',
'grey' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Répartition des Enquêtes par Année",
x = "Année",
y = "ID de l'Enquête",
color = "Flag WHZ") +
ggplot2::theme_minimal() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$flag_whz),
'4',
cut(metadata$flag_whz,
breaks = c(-Inf, 1, 5, Inf),
labels = c('green', 'orange', 'red')))
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('green' = 'Flagged WHZ < 1%',
'orange' = 'Flagged WHZ entre 1 et 5%',
'red' = 'Flagged WHZ > 5%',
'grey' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Répartition des Enquêtes par Année",
x = "Année",
y = "ID de l'Enquête",
color = "Flag WHZ") +
ggplot2::theme_minimal() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Répartition des Enquêtes par Année",
x = "Année",
y = "ID de l'Enquête",
color = "Flag WHZ") +
ggplot2::theme_minimal() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Répartition des Enquêtes par Année",
x = "Année",
y = "ID de l'Enquête",
color = "Flag WHZ") +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0)  # Align the legend to the left
)
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
)
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
)
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$flag_whz),
'4',
cut(metadata$flag_whz,
breaks = c(-Inf, 1, 5, Inf),
labels = c('green', 'orange', 'red')))
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'Pas de nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
)
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$flag_whz),
'4',
cut(metadata$flag_whz,
breaks = c(-Inf, 1, 5, Inf),
labels = c('green', 'orange', 'red')))
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = 'green', '2' = 'orange', '3' = 'red', '4' = 'grey'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'No nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
)
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$flag_whz),
'4',
cut(metadata$flag_whz,
breaks = c(-Inf, 1, 5, Inf),
labels = c('#b9d86d', '#ffb04c', '#ed2727')))
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = '#b9d86d', '2' = '#ffb04c', '3' = '#ed2727', '4' = '#b3adad'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'No nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
)
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$flag_whz),
'4',
cut(metadata$flag_whz,
breaks = c(-Inf, 1, 5, Inf),
labels = c('#166210', '#ffb04c', '#ed2727')))
# Créer le plot avec ggplot2
ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = '#166210', '2' = '#ffb04c', '3' = '#ed2727', '4' = '#b3adad'),
labels = c('1' = 'Flagged WHZ < 1%',
'2' = 'Flagged WHZ entre 1 et 5%',
'3' = 'Flagged WHZ > 5%',
'4' = 'No nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
)
metadata$nb_boys
metadata$nb_girls
metadata$sample_size_nutrition
metadata$nb_boys / metadata$sample_size_nutrition + metadata$nb_girls / metadata$sample_size_nutrition
metadata$perc_boys <- metadata$nb_boys / metadata$sample_size_nutrition
metadata$nb_boys / metadata$sample_size_nutrition
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$perc_boys),
'4',
cut(metadata$perc_boys,
breaks = c(-Inf, 0.4, 0.6, 1),
labels = c('#b7cefa', '#166210', '#002f89')))
plot <- ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = '#b7cefa', '2' = '#166210', '3' = '#002f89', '4' = '#b3adad'),
labels = c('1' = 'Majority of girls in the SMART',
'2' = 'Between 40 to 605 of boys in the SMART',
'3' = 'Majority of boys in the SMART',
'4' = 'No nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WAZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
)
plot
metadata <- rio::import(paste(folder_name, '/', all_files, sep=''))
metadata$perc_boys <- metadata$nb_boys / metadata$sample_size_nutrition
# Créer une nouvelle colonne pour les couleurs
metadata$color <- ifelse(is.na(metadata$perc_boys),
'4',
cut(metadata$perc_boys,
breaks = c(-Inf, 0.4, 0.6, 1),
labels = c('#b7cefa', '#166210', '#002f89')))
plot <- ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = '#b7cefa', '2' = '#166210', '3' = '#002f89', '4' = '#b3adad'),
labels = c('1' = 'Majority of girls in the SMART',
'2' = 'Between 40 to 60% of boys in the SMART',
'3' = 'Majority of boys in the SMART',
'4' = 'No nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Percentage of flagged WAZ per year and SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
)
plot
plot <- ggplot2::ggplot(metadata, ggplot2::aes(x = min_year_survey, y = new_name, color = color)) +
ggplot2::geom_point(size = 3) +  # Ajouter des points
ggplot2::scale_color_manual(
values = c('1' = '#b7cefa', '2' = '#166210', '3' = '#002f89', '4' = '#b3adad'),
labels = c('1' = 'Majority of girls in the SMART',
'2' = 'Between 40 to 60% of boys in the SMART',
'3' = 'Majority of boys in the SMART',
'4' = 'No nutrition information')
) +  # Définir les couleurs
ggplot2::labs(title = "Comparison of percentage of boys/girls in the different SMART Surveys",
x = "Year",
y = "SMART Surveys",
color = ggplot2::element_blank()) +
ggplot2::theme_bw() +  # Choisir un thème minimal
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # Place the legend below the plot
legend.justification = c(0, 0),  # Align the legend to the left
legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
)
plot
library(smartmetadata)
library(smartmetadata)
metadata <- rio::import(paste(folder_name, '/', all_files, sep='')) |>
dplyr::mutate(quality_score = ifelse(is.na(overall_score), 100, 100-overall_score))
# Add stard and end date into our dataset
metadata$start_year <- lubridate::year(as.Date(metadata$start_date))
metadata <- rio::import(paste(folder_name, '/', all_files, sep='')) |>
dplyr::mutate(start_date = as.Date(paste(min_day_survey, '/', min_month_survey, '/', min_year_survey, sep=""),
format = "%d/%m/%Y"),
end_date = as.Date(paste(max_day_survey, '/', max_month_survey, '/', max_year_survey, sep=""),
format = "%d/%m/%Y")) |>
dplyr::select(survey_id, start_date, end_date, recall_days,
lshtm_cdr_est, lshtm_cdr_u5_est)
metadata <- rio::import(paste(folder_name, '/', all_files, sep='')) |>
dplyr::mutate(start_date = as.Date(paste(min_day_survey, '/', min_month_survey, '/', min_year_survey, sep=""),
format = "%d/%m/%Y"),
end_date = as.Date(paste(max_day_survey, '/', max_month_survey, '/', max_year_survey, sep=""),
format = "%d/%m/%Y")) |>
dplyr::rename(survey_id = new_name) |>
dplyr::select(survey_id, start_date, end_date, recall_days,
lshtm_cdr_est, lshtm_cdr_u5_est)
# Add stard and end date into our dataset
metadata$start_year <- lubridate::year(as.Date(metadata$start_date))
metadata$start_month <- lubridate::month(as.Date(metadata$start_date))
metadata$end_year <- lubridate::year(as.Date(metadata$end_date))
metadata$end_month <- lubridate::month(as.Date(metadata$end_date))
metadata$recall_mid <- as.Date(metadata$end_date) - metadata$recall_days/2
metadata$year_recall_mid <- lubridate::year(metadata$recall_mid)
metadata$month_recall_mid <- lubridate::month(metadata$recall_mid)
dr_lab <- "Under 5 years death rate - SMART SURVEYS INFORMATION (per 10,000 child-days)"
plot <- ggplot2::ggplot(data = metadata, ggplot2::aes(x = year_recall_mid, y= lshtm_cdr_est)) +
ggplot2::geom_point() +
ggplot2::scale_y_continuous(dr_lab)+
ggplot2::theme(title = ggplot2::element_blank())+
ggplot2::labs(x = "Year") +
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_text(size=16, angle=45, vjust=1, hjust=1),
axis.title.y = ggplot2::element_text(size=18),
axis.title.x = ggplot2::element_text(size=18),
axis.text.y = ggplot2::element_text(size=18))
plot
ggplot2::ggplot(data = metadata, ggplot2::aes(x = year_recall_mid, y= lshtm_cdr_est)) +
ggplot2::geom_boxplot() +
ggplot2::scale_y_continuous(dr_lab)+
ggplot2::theme(title = ggplot2::element_blank())+
ggplot2::labs(x = "Year") +
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_text(size=16, angle=45, vjust=1, hjust=1),
axis.title.y = ggplot2::element_text(size=18),
axis.title.x = ggplot2::element_text(size=18),
axis.text.y = ggplot2::element_text(size=18))
ggplot2::ggplot(data = metadata, ggplot2::aes(x = factor(year_recall_mid), y= lshtm_cdr_est)) +
ggplot2::geom_point() +
ggplot2::scale_y_continuous(dr_lab)+
ggplot2::theme(title = ggplot2::element_blank())+
ggplot2::labs(x = "Year") +
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_text(size=16, angle=45, vjust=1, hjust=1),
axis.title.y = ggplot2::element_text(size=18),
axis.title.x = ggplot2::element_text(size=18),
axis.text.y = ggplot2::element_text(size=18))
ggplot2::ggplot(data = metadata, ggplot2::aes(x = factor(year_recall_mid), y= lshtm_cdr_est)) +
ggplot2::geom_boxplot() +
ggplot2::scale_y_continuous(dr_lab)+
ggplot2::theme(title = ggplot2::element_blank())+
ggplot2::labs(x = "Year") +
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_text(size=16, angle=45, vjust=1, hjust=1),
axis.title.y = ggplot2::element_text(size=18),
axis.title.x = ggplot2::element_text(size=18),
axis.text.y = ggplot2::element_text(size=18))
metadata <- rio::import(paste(folder_name, '/', all_files, sep='')) |>
dplyr::mutate(start_date = as.Date(paste(min_day_survey, '/', min_month_survey, '/', min_year_survey, sep=""),
format = "%d/%m/%Y"),
end_date = as.Date(paste(max_day_survey, '/', max_month_survey, '/', max_year_survey, sep=""),
format = "%d/%m/%Y")) |>
dplyr::rename(survey_id = new_name) |>
dplyr::select(survey_id, start_date, end_date, recall_days,
lshtm_cdr_est, lshtm_cdr_u5_est)
# Add stard and end date into our dataset
metadata$start_year <- lubridate::year(as.Date(metadata$start_date))
metadata$start_month <- lubridate::month(as.Date(metadata$start_date))
metadata$end_year <- lubridate::year(as.Date(metadata$end_date))
metadata$end_month <- lubridate::month(as.Date(metadata$end_date))
metadata$recall_mid <- as.Date(metadata$end_date) - metadata$recall_days/2
metadata$year_recall_mid <- lubridate::year(metadata$recall_mid)
metadata$month_recall_mid <- lubridate::month(metadata$recall_mid)
dr_lab <- "Crude death rate - SMART SURVEYS INFORMATION (per 10,000 person-days)"
plot <- ggplot2::ggplot(data = metadata, ggplot2::aes(x = factor(year_recall_mid), y= lshtm_cdr_est)) +
ggplot2::geom_boxplot() +
ggplot2::scale_y_continuous(dr_lab)+
ggplot2::theme(title = ggplot2::element_blank())+
ggplot2::labs(x = "Year") +
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_text(size=16, angle=45, vjust=1, hjust=1),
axis.title.y = ggplot2::element_text(size=18),
axis.title.x = ggplot2::element_text(size=18),
axis.text.y = ggplot2::element_text(size=18))
library(smartmetadata)
library(smartmetadata)
## Select all the files in the folder
all_files <- list.files(path = folder_name, pattern = ".csv")
## Find the cluster one
all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
# Check if the folder exists
if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
# If the folder does not exist, create it
dir.create(paste(folder_name, '/', 'vis_output', sep='')), recursive = TRUE)
## Select all the files in the folder
all_files <- list.files(path = folder_name, pattern = ".csv")
## Find the cluster one
all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
# Check if the folder exists
if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
# If the folder does not exist, create it
dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
}
paste(folder_name, '/', 'vis_output', sep='')
library(smartmetadata)
library(smartmetadata)
library(smartmetadata)
install.packages("smartcleaning")
install.packages('smartmetadata')
install.packages('smartextract')
shiny::runApp('~/SMART_Surveys_App/smart_app')
library(smartmetadata)
