#' Function to plot one of the nutrition plots
#'
#' @param folder_name path containing the results
#' @param type_plot hist_whz, hist_haz, hist_waz, hist_bio, whz_year, waz_year, haz_year, perc_boy_girls
#' @return plot
#' @export
f_plot_nutrition_tab <- function(folder_name, type_plot){
  if(type_plot == 'hist_whz'){
    return(f_hist_flag_WHZ(folder_name))
  }else if(type_plot == 'hist_haz'){
    return(f_hist_flag_HAZ(folder_name))
  }else if(type_plot == 'hist_waz'){
    return(f_hist_flag_WAZ(folder_name))
  }else if(type_plot == 'whz_year'){
    return(f_plot_whz_year(folder_name))
  }else if(type_plot == 'waz_year'){
    return(f_plot_waz_year(folder_name))
  }else if(type_plot == 'haz_year'){
    return(f_plot_haz_year(folder_name))
  }else if(type_plot == 'hist_bio'){
    return(f_hist_flag_bio(folder_name))
  }else{
    return(f_plot_boy_year(folder_name))
  }
}



#' Flagged WHZ histogram
#'
#' @param folder_name path containing the results
#' @return plot
#' @export
f_hist_flag_WHZ <- function(folder_name){
  ## Select all the files in the folder
  all_files <- list.files(path = folder_name, pattern = ".csv")
  ## Find the cluster one
  all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
  # Check if the folder exists
  if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
    # If the folder does not exist, create it
    dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
  }
  if(length(all_files) != 0){
    metadata <- rio::import(paste(folder_name, '/', all_files, sep=''))
    plot_freq <- ggplot2::ggplot(metadata, ggplot2::aes(flag_whz)) +
      ggplot2::geom_histogram(fill ="#56B4E9", color='black') +
      ggplot2::ylab('Frequency') +
      ggplot2::xlab('% of flagged WHZ') +
      ggplot2::theme_bw() +
      ggplot2::theme(axis.title.x = ggplot2::element_text(size=20),
                     axis.text.x = ggplot2::element_text(size=18),
                     axis.title.y = ggplot2::element_text(size=20),
                     axis.text.y = ggplot2::element_text(size=18))
    ggplot2::ggsave(paste(folder_name, '/', 'vis_output', '/', 'hist_flag_whz.png',sep=""),
                    dpi = "print", units = "cm", width = 30, height = 30)
    return(plot_freq)
  }
}

#' Flagged waz histogram
#'
#' @param folder_name path containing the results
#' @return plot
#' @export
f_hist_flag_WAZ <- function(folder_name){
  ## Select all the files in the folder
  all_files <- list.files(path = folder_name, pattern = ".csv")
  ## Find the cluster one
  all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
  # Check if the folder exists
  if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
    # If the folder does not exist, create it
    dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
  }
  if(length(all_files) != 0){
    metadata <- rio::import(paste(folder_name, '/', all_files, sep=''))
    plot_freq <- ggplot2::ggplot(metadata, ggplot2::aes(flag_waz)) +
      ggplot2::geom_histogram(fill ="#56B4E9", color='black') +
      ggplot2::ylab('Frequency') +
      ggplot2::xlab('% of flagged WAZ') +
      ggplot2::theme_bw() +
      ggplot2::theme(axis.title.x = ggplot2::element_text(size=20),
                     axis.text.x = ggplot2::element_text(size=18),
                     axis.title.y = ggplot2::element_text(size=20),
                     axis.text.y = ggplot2::element_text(size=18))
    ggplot2::ggsave(paste(folder_name, '/', 'vis_output', '/', 'hist_flag_waz.png',sep=""),
                    dpi = "print", units = "cm", width = 30, height = 30)
    return(plot_freq)
  }
}

#' Flagged haz histogram
#'
#' @param folder_name path containing the results
#' @return plot
#' @export
f_hist_flag_HAZ <- function(folder_name){
  ## Select all the files in the folder
  all_files <- list.files(path = folder_name, pattern = ".csv")
  ## Find the cluster one
  all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
  # Check if the folder exists
  if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
    # If the folder does not exist, create it
    dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
  }
  if(length(all_files) != 0){
    metadata <- rio::import(paste(folder_name, '/', all_files, sep=''))
    plot_freq <- ggplot2::ggplot(metadata, ggplot2::aes(flag_haz)) +
      ggplot2::geom_histogram(fill ="#56B4E9", color='black') +
      ggplot2::ylab('Frequency') +
      ggplot2::xlab('% of flagged WAZ') +
      ggplot2::theme_bw() +
      ggplot2::theme(axis.title.x = ggplot2::element_text(size=20),
                     axis.text.x = ggplot2::element_text(size=18),
                     axis.title.y = ggplot2::element_text(size=20),
                     axis.text.y = ggplot2::element_text(size=18))
    ggplot2::ggsave(paste(folder_name, '/', 'vis_output', '/', 'hist_flag_haz.png',sep=""),
                    dpi = "print", units = "cm", width = 30, height = 30)
    return(plot_freq)
  }
}

#' Flagged bio histogram
#'
#' @param folder_name path containing the results
#' @return plot
#' @export
f_hist_flag_bio <- function(folder_name){
  ## Select all the files in the folder
  all_files <- list.files(path = folder_name, pattern = ".csv")
  ## Find the cluster one
  all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
  # Check if the folder exists
  if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
    # If the folder does not exist, create it
    dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
  }
  if(length(all_files) != 0){
    metadata <- rio::import(paste(folder_name, '/', all_files, sep=''))
    plot_freq <- ggplot2::ggplot(metadata, ggplot2::aes(flag_bio)) +
      ggplot2::geom_histogram(fill ="#56B4E9", color='black') +
      ggplot2::ylab('Frequency') +
      ggplot2::xlab('% of flagged bio') +
      ggplot2::theme_bw() +
      ggplot2::theme(axis.title.x = ggplot2::element_text(size=20),
                     axis.text.x = ggplot2::element_text(size=18),
                     axis.title.y = ggplot2::element_text(size=20),
                     axis.text.y = ggplot2::element_text(size=18))
    ggplot2::ggsave(paste(folder_name, '/', 'vis_output', '/', 'hist_flag_bio.png',sep=""),
                    dpi = "print", units = "cm", width = 30, height = 30)
    return(plot_freq)
  }
}

#' Flagged whz per year survey id
#'
#' @param folder_name path containing the results
#' @return plot
#' @export
f_plot_whz_year <- function(folder_name){
  ## Select all the files in the folder
  all_files <- list.files(path = folder_name, pattern = ".csv")
  ## Find the cluster one
  all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
  # Check if the folder exists
  if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
    # If the folder does not exist, create it
    dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
  }
  if(length(all_files) != 0){
    metadata <- rio::import(paste(folder_name, '/', all_files, sep=''))|>
      dplyr::mutate(start_date = as.Date(paste(min_day_survey, '/', min_month_survey, '/', min_year_survey, sep=""),
                                         format = "%d/%m/%Y"),
                    end_date = as.Date(paste(max_day_survey, '/', max_month_survey, '/', max_year_survey, sep=""),
                                       format = "%d/%m/%Y"))
    # Add stard and end date into our dataset - to calculate mid year
    metadata$start_year <- lubridate::year(as.Date(metadata$start_date))
    metadata$start_month <- lubridate::month(as.Date(metadata$start_date))
    metadata$end_year <- lubridate::year(as.Date(metadata$end_date))
    metadata$end_month <- lubridate::month(as.Date(metadata$end_date))
    metadata$recall_mid <- as.Date(metadata$end_date) - metadata$recall_days/2
    metadata$year_recall_mid <- lubridate::year(metadata$recall_mid)
    metadata$month_recall_mid <- lubridate::month(metadata$recall_mid)

    # Créer une nouvelle colonne pour les couleurs
    metadata$color <- ifelse(is.na(metadata$flag_whz),
                             '4',
                             cut(metadata$flag_whz,
                                 breaks = c(-Inf, 1, 5, Inf),
                                 labels = c('#166210', '#ffb04c', '#ed2727')))
    plot <- ggplot2::ggplot(metadata, ggplot2::aes(x = year_recall_mid, y = new_name, color = color)) +
      ggplot2::geom_point(size = 3) +  # Ajouter des points
      ggplot2::scale_color_manual(
        values = c('1' = '#166210', '2' = '#ffb04c', '3' = '#ed2727', '4' = '#b3adad'),
        labels = c('1' = 'Flagged WHZ < 1%',
                   '2' = 'Flagged WHZ entre 1 et 5%',
                   '3' = 'Flagged WHZ > 5%',
                   '4' = 'No nutrition information')
      ) +  # Définir les couleurs
      ggplot2::labs(title = "Percentage of flagged WHZ per year and SMART Surveys",
                    x = "Year",
                    y = "SMART Surveys",
                    color = ggplot2::element_blank()) +
      ggplot2::theme_bw() +  # Choisir un thème minimal
      ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
                     legend.position = "bottom",  # Place the legend below the plot
                     legend.justification = c(0, 0),  # Align the legend to the left
                     legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
                     legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
      )
    ggplot2::ggsave(paste(folder_name, '/', 'vis_output', '/', 'flagged_whz_per_year_smart.png',sep=""),
                    dpi = "print", units = "cm", width = 30, height = 50)
    return(plot)
  }
}

#' Flagged haz per year survey id
#'
#' @param folder_name path containing the results
#' @return plot
#' @export
f_plot_haz_year <- function(folder_name){
  ## Select all the files in the folder
  all_files <- list.files(path = folder_name, pattern = ".csv")
  ## Find the cluster one
  all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
  # Check if the folder exists
  if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
    # If the folder does not exist, create it
    dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
  }
  if(length(all_files) != 0){
    metadata <- rio::import(paste(folder_name, '/', all_files, sep=''))|>
      dplyr::mutate(start_date = as.Date(paste(min_day_survey, '/', min_month_survey, '/', min_year_survey, sep=""),
                                         format = "%d/%m/%Y"),
                    end_date = as.Date(paste(max_day_survey, '/', max_month_survey, '/', max_year_survey, sep=""),
                                       format = "%d/%m/%Y"))
    # Add stard and end date into our dataset - to calculate mid year
    metadata$start_year <- lubridate::year(as.Date(metadata$start_date))
    metadata$start_month <- lubridate::month(as.Date(metadata$start_date))
    metadata$end_year <- lubridate::year(as.Date(metadata$end_date))
    metadata$end_month <- lubridate::month(as.Date(metadata$end_date))
    metadata$recall_mid <- as.Date(metadata$end_date) - metadata$recall_days/2
    metadata$year_recall_mid <- lubridate::year(metadata$recall_mid)
    metadata$month_recall_mid <- lubridate::month(metadata$recall_mid)
    # Créer une nouvelle colonne pour les couleurs
    metadata$color <- ifelse(is.na(metadata$flag_haz),
                             '4',
                             cut(metadata$flag_haz,
                                 breaks = c(-Inf, 1, 5, Inf),
                                 labels = c('#166210', '#ffb04c', '#ed2727')))
    plot <- ggplot2::ggplot(metadata, ggplot2::aes(x = year_recall_mid, y = new_name, color = color)) +
      ggplot2::geom_point(size = 3) +  # Ajouter des points
      ggplot2::scale_color_manual(
        values = c('1' = '#166210', '2' = '#ffb04c', '3' = '#ed2727', '4' = '#b3adad'),
        labels = c('1' = 'Flagged HAZ < 1%',
                   '2' = 'Flagged HAZ entre 1 et 5%',
                   '3' = 'Flagged HAZ > 5%',
                   '4' = 'No nutrition information')
      ) +  # Définir les couleurs
      ggplot2::labs(title = "Percentage of flagged HAZ per year and SMART Surveys",
                    x = "Year",
                    y = "SMART Surveys",
                    color = ggplot2::element_blank()) +
      ggplot2::theme_bw() +  # Choisir un thème minimal
      ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
                     legend.position = "bottom",  # Place the legend below the plot
                     legend.justification = c(0, 0),  # Align the legend to the left
                     legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
                     legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
      )
    ggplot2::ggsave(paste(folder_name, '/', 'vis_output', '/', 'flagged_haz_per_year_smart.png',sep=""),
                    dpi = "print", units = "cm", width = 30, height = 50)
    return(plot)
  }
}

#' Flagged waz per year survey id
#'
#' @param folder_name path containing the results
#' @return plot
#' @export
f_plot_waz_year <- function(folder_name){
  ## Select all the files in the folder
  all_files <- list.files(path = folder_name, pattern = ".csv")
  ## Find the cluster one
  all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
  # Check if the folder exists
  if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
    # If the folder does not exist, create it
    dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
  }
  if(length(all_files) != 0){
    metadata <- rio::import(paste(folder_name, '/', all_files, sep='')) |>
      dplyr::mutate(start_date = as.Date(paste(min_day_survey, '/', min_month_survey, '/', min_year_survey, sep=""),
                                         format = "%d/%m/%Y"),
                    end_date = as.Date(paste(max_day_survey, '/', max_month_survey, '/', max_year_survey, sep=""),
                                       format = "%d/%m/%Y"))
    # Add stard and end date into our dataset - to calculate mid year
    metadata$start_year <- lubridate::year(as.Date(metadata$start_date))
    metadata$start_month <- lubridate::month(as.Date(metadata$start_date))
    metadata$end_year <- lubridate::year(as.Date(metadata$end_date))
    metadata$end_month <- lubridate::month(as.Date(metadata$end_date))
    metadata$recall_mid <- as.Date(metadata$end_date) - metadata$recall_days/2
    metadata$year_recall_mid <- lubridate::year(metadata$recall_mid)
    metadata$month_recall_mid <- lubridate::month(metadata$recall_mid)
    # Créer une nouvelle colonne pour les couleurs
    metadata$color <- ifelse(is.na(metadata$flag_waz),
                             '4',
                             cut(metadata$flag_waz,
                                 breaks = c(-Inf, 1, 5, Inf),
                                 labels = c('#166210', '#ffb04c', '#ed2727')))
    plot <- ggplot2::ggplot(metadata, ggplot2::aes(x = year_recall_mid, y = new_name, color = color)) +
      ggplot2::geom_point(size = 3) +  # Ajouter des points
      ggplot2::scale_color_manual(
        values = c('1' = '#166210', '2' = '#ffb04c', '3' = '#ed2727', '4' = '#b3adad'),
        labels = c('1' = 'Flagged WAZ < 1%',
                   '2' = 'Flagged WAZ entre 1 et 5%',
                   '3' = 'Flagged WAZ > 5%',
                   '4' = 'No nutrition information')
      ) +  # Définir les couleurs
      ggplot2::labs(title = "Percentage of flagged WAZ per year and SMART Surveys",
                    x = "Year",
                    y = "SMART Surveys",
                    color = ggplot2::element_blank()) +
      ggplot2::theme_bw() +  # Choisir un thème minimal
      ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
                     legend.position = "bottom",  # Place the legend below the plot
                     legend.justification = c(0, 0),  # Align the legend to the left
                     legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
                     legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
      )
    ggplot2::ggsave(paste(folder_name, '/', 'vis_output', '/', 'flagged_waz_per_year_smart.png',sep=""),
                    dpi = "print", units = "cm", width = 30, height = 50)
    return(plot)
  }
}

#' Flagged waz per year survey id
#'
#' @param folder_name path containing the results
#' @return plot
#' @export
f_plot_boy_year <- function(folder_name){
  ## Select all the files in the folder
  all_files <- list.files(path = folder_name, pattern = ".csv")
  ## Find the cluster one
  all_files <- all_files[grepl(pattern = 'metadata_clean', x=all_files)]
  # Check if the folder exists
  if (!dir.exists(paste(folder_name, '/', 'vis_output', sep=''))) {
    # If the folder does not exist, create it
    dir.create(paste(folder_name, '/', 'vis_output', sep=''), recursive = TRUE)
  }
  if(length(all_files) != 0){
    metadata <- rio::import(paste(folder_name, '/', all_files, sep='')) |>
      dplyr::mutate(start_date = as.Date(paste(min_day_survey, '/', min_month_survey, '/', min_year_survey, sep=""),
                                         format = "%d/%m/%Y"),
                    end_date = as.Date(paste(max_day_survey, '/', max_month_survey, '/', max_year_survey, sep=""),
                                       format = "%d/%m/%Y"))
    metadata$perc_boys <- metadata$nb_boys / metadata$sample_size_nutrition
    # Add stard and end date into our dataset - to calculate mid year
    metadata$start_year <- lubridate::year(as.Date(metadata$start_date))
    metadata$start_month <- lubridate::month(as.Date(metadata$start_date))
    metadata$end_year <- lubridate::year(as.Date(metadata$end_date))
    metadata$end_month <- lubridate::month(as.Date(metadata$end_date))
    metadata$recall_mid <- as.Date(metadata$end_date) - metadata$recall_days/2
    metadata$year_recall_mid <- lubridate::year(metadata$recall_mid)
    metadata$month_recall_mid <- lubridate::month(metadata$recall_mid)
    # Créer une nouvelle colonne pour les couleurs
    metadata$color <- ifelse(is.na(metadata$perc_boys),
                             '4',
                             cut(metadata$perc_boys,
                                 breaks = c(-Inf, 0.4, 0.6, 1),
                                 labels = c('#b7cefa', '#166210', '#002f89')))
    plot <- ggplot2::ggplot(metadata, ggplot2::aes(x = year_recall_mid, y = new_name, color = color)) +
      ggplot2::geom_point(size = 3) +  # Ajouter des points
      ggplot2::scale_color_manual(
        values = c('1' = '#b7cefa', '2' = '#166210', '3' = '#002f89', '4' = '#b3adad'),
        labels = c('1' = 'Majority of girls in the SMART',
                   '2' = 'Between 40 to 60% of boys in the SMART',
                   '3' = 'Majority of boys in the SMART',
                   '4' = 'No nutrition information')
      ) +  # Définir les couleurs
      ggplot2::labs(title = "Comparison of percentage of boys/girls in the different SMART Surveys",
                    x = "Year",
                    y = "SMART Surveys",
                    color = ggplot2::element_blank()) +
      ggplot2::theme_bw() +  # Choisir un thème minimal
      ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1),
                     legend.position = "bottom",  # Place the legend below the plot
                     legend.justification = c(0, 0),  # Align the legend to the left
                     legend.box.margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0),
                     legend.box.spacing = ggplot2::margin(0, 0, 0, 0)
      )
    ggplot2::ggsave(paste(folder_name, '/', 'vis_output', '/', 'percentage_boy_girl_per_year_smart.png',sep=""),
                    dpi = "print", units = "cm", width = 30, height = 50)
    return(plot)
  }
}






